name: Render Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - next
    tags:
      - v*

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      DOCKER_USERNAME: ${{ vars.DOCKER_USER }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_PWD }}
      DATABASE_URL: ${{ secrets.PROD_DB }}
      SYSTEM_WALLET: ${{ secrets.SYSTEM_WALLET }}
      SYSTEM_STARTING_BALANCE: ${{ vars.SYSTEM_STARTING_BALANCE }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
      - name: Install PNPM
        run: npm install -g pnpm
      - name: Get Store Path
        id: get-store-path
        run: echo "store-path=$(pnpm store path)\n" >> $GITHUB_OUTPUT
      - name: Setup Cache
        id: setup-cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ hashFiles('**/*lock*', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('**/*lock*', 'package.json') }}
            ${{ runner.os }}-
          path: |
            node_modules
            ${{ steps.get-store-path.outputs.store-path }}
            .netlify
      - name: Install Dependencies üì¶
        if: steps.setup-cache.outputs.cache-hit != 'true'
        run: pnpm i
      - name: Migrate Staging Database Schema
        if: github.ref_type == 'branch' && github.ref_name == 'next'
        env:
          DATABASE_URL: ${{ secrets.STAGING_DB }}
          SYSTEM_WALLET: ${{ secrets.STAGING_WALLET }}
        run: |
          pnpm migrate.prod
          pnpm db.seed
      - name: Migrate Production Database Schema
        if: github.ref_type == 'tag'
        env:
          DATABASE_URL: ${{ secrets.PROD_DB }}
          SYSTEM_STARTING_BALANCE: 0
        run: |
          pnpm migrate.prod
          pnpm db.seed
      - name: Build ‚öôÔ∏è
        run: pnpm build
      - name: Docker login
        run: echo ${{ env.DOCKER_TOKEN }} | docker login -u ${{ env.DOCKER_USERNAME }} --password-stdin
      - name: Docker Push Staging ‚¨ÜÔ∏è
        if: github.ref_name == 'next' && github.ref_type == 'branch'
        env:
          DEPLOY_URL: ${{ secrets.STAGING_DEPLOY_HOOK }}
        run: |
          docker build . -t ${{ env.DOCKER_USERNAME }}/tellthem-api:staging
          docker push ${{ env.DOCKER_USERNAME }}/tellthem-api:staging
          curl "${{ env.DEPLOY_URL }}"
      - name: Docker Push Production ‚¨ÜÔ∏è
        if: github.ref_type == 'tag'
        env:
          DEPLOY_URL: ${{ secrets.PROD_DEPLOY_HOOK }}
        run: |
          docker build . -t ${{ env.DOCKER_USERNAME }}/tellthem-api:latest -t ${{ env.DOCKER_USERNAME}}/tellthem-api:${{ github.ref_name }}
          docker push ${{ env.DOCKER_USERNAME }}/tellthem-api:latest
          docker push ${{ env.DOCKER_USERNAME}}/tellthem-api:${{ github.ref_name }}
          curl "${{ env.DEPLOY_URL }}"
      - name: Remove docker password
        run: |
          rm /home/runner/.docker/config.json